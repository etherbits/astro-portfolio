---
import type { languages } from "../i18n/ui";
import { generateTranslator, getLangFromUrl } from "../i18n/utils";
import { cn } from "../utils/tailwind";
import Button from "./Button.astro";
import JourneyCard, { type Journey } from "./JourneyCard.astro";
import Link from "./Link.astro";
interface Props {
  journeys: Journey[];
}

const lang = getLangFromUrl(Astro.url) as keyof typeof languages;
const t = generateTranslator(lang);

const { props } = Astro;
---

<ul
  class="mt-[4vh] xl:max-w-clamp-journey mx-auto hidden xl:grid items-center gap-0 [grid-auto-rows:1fr]"
  id="desktop-journeys"
>
  {
    props.journeys.map((journey, i) => {
      const isOdd = i % 2 !== 0;
      return (
        <li
          id={journey.title}
          class="relative z-[-1] flex h-full flex-col justify-center py-2"
        >
          <div
            class={cn(
              "my-auto flex h-fit w-[46%] flex-col rounded-xl bg-gradient-to-r px-6 py-4 backdrop-blur-lg",
              {
                "ml-auto": isOdd,
              },
            )}
          >
            <JourneyCard journey={journey} reverse={i % 2 !== 0} />
          </div>
          <div>
            <div
              class="absolute left-[50%] top-[50%] block h-5 w-5 translate-x-[-50%] translate-y-[-50%] rounded-full bg-blue-300 [transform-origin:0_0] opacity-0 scale-0"
              journey-dot
            />
            <div
              class={cn(
                "absolute left-[50%] top-[50%] z-[-1] flex  h-[100%] w-1 translate-x-[-50%] flex-col  justify-between",
              )}
              journey-path
            >
              {[...Array(3)].map((_) => {
                return (
                  <div class="h-[24%] w-full rounded-full bg-slate-600 [transform-origin:-100%_0] opacity-0" />
                );
              })}
            </div>
          </div>
        </li>
      );
    })
  }
  <li
    id="journey-button-item"
    class="relative grid h-full grid-rows-[1fr_1fr] justify-center"
  >
    <div class="row-start-2 row-end-3 mt-8 opacity-0" id="journey-button">
      <Link href="/contact-me">
        <Button>{t("journey.contact_button")}</Button>
      </Link>
    </div>
  </li>
</ul>

<script>
  import anime from "animejs/lib/anime.es";

  function attachIntersectionAnimations() {
    const journeyItems = document.querySelectorAll("#desktop-journeys li");
    const animatedElements: Element[] = [];
    const animationCallbacks: (() => void)[] = [];
    let didStartAnimation = false;
    const options = {
      root: null,
    };

    function animateJourney(target: Element) {
      const card = target.querySelector("[journey-card]");
      const dot = target.querySelector("[journey-dot]");
      const path = target.querySelectorAll("[journey-path] div");
      const isReversed = card?.getAttribute("is-reversed");
      animationCallbacks.push(() => {
        const tl = anime.timeline({
          complete: () => {
            const animation = animationCallbacks.shift();
            if (!animation) {
              didStartAnimation = false;
              return;
            }
            animation();
          },
        });

        tl.add({
          targets: dot,
          opacity: 1,
          scale: [0.5, 1],
          translateX: ["-50%", "-50%"],
          translateY: ["-50%", "-50%"],
          easing: "easeOutQuad",
          duration: 250,
        })
          .add({
            targets: card,
            opacity: 1,
            translateX: isReversed ? "1rem" : "-1rem",
            easing: "easeOutQuad",
            duration: 250,
          })
          .add({
            targets: path,
            opacity: 1,
            easing: "easeOutQuad",
            duration: 150,
            delay: anime.stagger(50),
          });
      });
    }

    function animateButton(target: Element) {
      const button = target.querySelector("#journey-button");

      animationCallbacks.push(() => {
        const tl = anime.timeline({
          complete: () => {
            const animation = animationCallbacks.shift();
            if (!animation) {
              didStartAnimation = false;
              return;
            }
            animation();
          },
        });

        tl.add({
          targets: button,
          opacity: 1,
          easing: "easeOutQuad",
          duration: 350,
        });
      });
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          return;
        }

        if (animatedElements.some((el) => el.id === entry.target.id)) {
          return;
        }
        animatedElements.push(entry.target);

        if (entry.target.querySelector("#journey-button")) {
          animateButton(entry.target);
        } else {
          animateJourney(entry.target);
        }

        if (!didStartAnimation) {
          didStartAnimation = true;
          animationCallbacks.shift()!();
        }
      });
    }, options);

    journeyItems.forEach((card) => {
      observer.observe(card);
    });
  }

  attachIntersectionAnimations();
  document.addEventListener("astro:after-swap", attachIntersectionAnimations);
</script>
