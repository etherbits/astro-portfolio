---
import { cn } from "../utils/tailwind";
import Button from "./Button.astro";
import { getLangFromUrl, generateTranslator } from "../i18n/utils";
import GithubImg from "../assets/images/github.webp";
import Blob from "../assets/images/laptop-blob.svg";
import { Image } from "astro:assets";

type Props = {
  title: string;
  description: string;
  image: string;
  repoLink: string;
  websiteLink?: string;
  demoLink?: string;
  disclamer?: string;
  tags: string[];
  reverse: boolean;
};

const lang = getLangFromUrl(Astro.url);
const t = generateTranslator(lang!);

const { props } = Astro;
---

<section
  id={props.title}
  class={cn(
    "flex w-full flex-col gap-5 xl:flex-row md:items-start md:justify-center md:gap-[5vw] md:px-12",
    { "xl:flex-row-reverse": props.reverse },
  )}
  project-card
>
  <div
    class="relative md:h-fit md:mt-[2%] md:basis-[clamp(24rem,46%,46rem)] opacity-0"
    project-image
  >
    <Image
      src={props.image}
      width={1022}
      height={632}
      alt={props.title}
      class="mx-auto mb-8 w-[90%] md:w-[100%]"
    />
    <Image
      src={Blob}
      width={70}
      height={198}
      alt="blob"
      class={cn(
        "absolute top-1/2 z-[-1] h-[56%] w-1/2  translate-y-[-50%] blur-[40px] md:blur-[64px] 2xl:blur-[96px]",
        { "left-[10%]": !props.reverse },
        { "right-[10%]": props.reverse },
      )}
    />
  </div>
  <div class="flex px-5 flex-col md:basis-[clamp(24rem,44%,44rem)]">
    <h2
      class="mb-6 text-2xl font-medium md:mb-8 md:text-clamp-xl text-slate-200 opacity-0"
      project-title
    >
      {props.title}
    </h2>
    <p
      class="mb-6 text-base md:mb-8 sm:text-clamp-base text-slate-300 opacity-0"
      project-description
    >
      {props.description}
    </p>
    <ul
      class="mb-10 flex max-w-full flex-wrap gap-3 text-slate-300 md:mb-10 text-clamp-sm"
    >
      {
        props.tags.map((tag) => (
          <li
            class="border-1 rounded-[4px] border border-slate-400 px-2 py-1 opacity-0"
            project-tag
          >
            {tag}
          </li>
        ))
      }
    </ul>
    <div class="flex flex-col opacity-0" project-actions>
      {
        props.disclamer && (
          <p class="mb-6 text-right text-sm sm:text-clamp-sm text-slate-400">
            {props.disclamer}
          </p>
        )
      }
      <div class="ml-auto flex items-center gap-8 flex-wrap justify-end">
        {
          props.websiteLink && (
            <div>
              <a href={props.websiteLink} target="_blank">
                <Button class="text-sm md:text-clamp-sm">
                  {t("projects.webpage_button")}
                </Button>
              </a>
            </div>
          )
        }
        {
          props.demoLink && (
            <div>
              <a href={props.demoLink} target="_blank">
                <Button class="text-sm md:text-clamp-rg">
                  {t("projects.demo_button")}
                </Button>
              </a>
            </div>
          )
        }

        <a href={props.repoLink} target="_blank">
          <div class="md:hidden">
            <Image
              src={GithubImg}
              width={42}
              height={42}
              alt="github link"
              class="border-1 h-10 w-10 rounded-md border border-slate-600"
            />
          </div>
          <div class="hidden md:block">
            <Image
              src={GithubImg}
              width={48}
              height={48}
              alt="github link"
              class="border-1 h-11 w-11 rounded-md border border-slate-600"
            />
          </div>
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  import anime from "animejs/lib/anime.es";

  function attachIntersectionAnimations() {
    const projectCards = document.querySelectorAll("[project-card]");
    const animatedElements: Element[] = [];
    const animationCallbacks: (() => void)[] = [];
    let didStartAnimation = false;
    const options = {
      root: null,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          return;
        }

        if (animatedElements.some((el) => el.id === entry.target.id)) {
          return;
        }
        animatedElements.push(entry.target);

        const image = entry.target.querySelector("[project-image]");
        const title = entry.target.querySelector("[project-title]");
        const description = entry.target.querySelector("[project-description]");
        const tags = entry.target.querySelectorAll("[project-tag]");
        const actions = entry.target.querySelector("[project-actions]");

        animationCallbacks.push(() => {
          const tl = anime.timeline({
            complete: () => {
              const animation = animationCallbacks.shift();
              if (!animation) {
                didStartAnimation = false;
                return;
              }
              animation();
            },
          });

          tl.add({
            targets: [image, title, description],
            opacity: 1,
            easing: "linear",
            duration: 350,
          })
            .add({
              targets: tags,
              opacity: 1,
              easing: "linear",
              duration: 150,
              delay: anime.stagger(50),
            })
            .add({
              targets: actions,
              opacity: 1,
              easing: "linear",
              duration: 250,
            });
        });

        if (!didStartAnimation) {
          didStartAnimation = true;
          animationCallbacks.shift()!();
        }
      });
    }, options);

    projectCards.forEach((card) => {
      observer.observe(card);
    });
  }

  attachIntersectionAnimations();
  document.addEventListener("astro:after-swap", attachIntersectionAnimations);
</script>
