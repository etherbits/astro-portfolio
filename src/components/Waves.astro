---
import type { HTMLAttributes } from "astro/types";
import { waveObjs } from "../waves";
import { cn } from "../utils/tailwind";

type WaveKey = keyof typeof waveObjs;

interface Props extends HTMLAttributes<"svg"> {
  type: WaveKey;
  delay?: number;
}

const { delay = 0, ...props } = Astro.props;

const { viewBox, lines } = waveObjs[props.type];
---

<svg
  viewBox={viewBox}
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
  preserveAspectRatio="none"
  class={cn(
    "fixed pointer-events-none overflow-hidden stroke-slate-700 stroke-[2px] ",
    props.class,
  )}
  svg-waves
  {...props}
>
  {lines.map((line) => <path d={line.d} class="opacity-0" bg-lines />)}
  {
    lines.map((line) => {
      return <path d={line.d} class="opacity-0" fg-lines />;
    })
  }
</svg>

<script>
  import anime from "animejs/lib/anime.es";
  const svgWaves = document.querySelectorAll("[svg-waves]");

  const bgDuration = 1000;
  const bgPathDelayIncrement = 50;

  const fgDuration = 1500;
  const fgPathDelayIncrement = 50;

  function attachLineAnimations() {
    const bgTl = anime.timeline();
    const fgTl = anime.timeline({ autoplay: false, loop: true });

    bgTl.finished.then(fgTl.play);

    svgWaves.forEach((wave, i) => {
      const bgLines = wave.querySelectorAll("[bg-lines]");
      const isEven = i % 2 === 0;

      bgTl.add({
        targets: bgLines,
        strokeDashoffset: (el: SVGPathElement) => {
          return isEven
            ? [anime.setDashoffset, 0]
            : [-anime.setDashoffset(el), 0];
        },
        opacity: (_: SVGPathElement, j: number) => [
          0.1,
          (j + 1) / (bgLines.length - 1),
        ],
        easing: "linear",
        duration: bgDuration,
        delay: anime.stagger(bgPathDelayIncrement),
        loop: false,
      });
    });

    svgWaves.forEach((wave, i) => {
      const fgLines = wave.querySelectorAll("[fg-lines]");
      const isEven = i % 2 === 0;

      fgTl.add({
        targets: fgLines,
        strokeDashoffset: (el: SVGPathElement) => {
          return isEven
            ? [anime.setDashoffset, -el.getTotalLength()]
            : [-el.getTotalLength(), anime.setDashoffset];
        },
        easing: "linear",
        stroke: ["#60a5fa", "#3b82f6", "#2563eb"],
        opacity: (_: any, j: number) => [
          1 - (fgLines.length - (j + 1)) / fgLines.length,
          0,
          0,
        ],
        duration: fgDuration,
        delay: anime.stagger(fgPathDelayIncrement),
        loop: false,
        
      }, i !== 0 ? `-=${fgDuration*0.6}` : 0);
    });
  }

  attachLineAnimations();
</script>
