---
import type { HTMLAttributes } from "astro/types";
import { waveObjs } from "../waves";
import { cn } from "../utils/tailwind";

type WaveKey = keyof typeof waveObjs;

interface Props extends HTMLAttributes<"svg"> {
  type: WaveKey;
}

const { props } = Astro;

const { viewBox, lines } = waveObjs[props.type];
---

<svg
  viewBox={viewBox}
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
  preserveAspectRatio="none"
  class={cn(
    "fixed pointer-events-none overflow-hidden stroke-slate-700 stroke-[1.5px]",
    props.class,
  )}
  {...props}
>
  {
    lines.map((line, i) => (
      <path
        d={line.d}
        class="animate-bgLine [stroke-dasharray:100]"
        pathLength="100"
        style={{
          opacity: Math.min(i / 10 + 0.1, 1),
        }}
      />
    ))
  }
  {
    lines.map((line, i) => {
      console.log(i);
      return (
        <path
          d={line.d}
          class={cn("stroke-blue-400 [stroke-dasharray:0_100] animate-fgLine")}
          style={{
            animationDelay: `${1.5 + i / 20}s`,
          }}
          pathLength="100"
        />
      );
    })
  }
</svg>
