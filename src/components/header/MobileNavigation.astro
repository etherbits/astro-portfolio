---
import { navigationLinks } from "./ResponsiveNavigation.astro";
import Icon from "../Icon.astro";
import { generateTranslator, getLangFromUrl } from "../../i18n/utils";
import type { TranslationKey } from "../../i18n/ui";
import LanguageToggle from "./LanguageToggle.astro";
import { cn } from "../../utils/tailwind";

const pathname = Astro.url.pathname;

const lang = getLangFromUrl(Astro.url);
const t = generateTranslator(lang!);
---

<div class="transition-colors relative" burger-container>
  <button
    class={"rounded-md p-3  backdrop-blur-md bg-neutral-950/60 hover:bg-neutral-900/60"}
    title="toggle burger menu"
  >
    <Icon icon="Menu" class="stroke-slate-300" />
  </button>
  <div class="">
    <div
      class="absolute right-0 top-[100%] z-20 mt-4 w-40 rounded-md text-slate-200 backdrop-blur-lg bg-neutral-950/60 opacity-0"
      burger-dropdown
    >
      <nav>
        <ul>
          {
            navigationLinks.map((link) => {
              const navTranslationKey = ("navigation." +
                link.name) as TranslationKey;
              return (
                <li class="flex w-full">
                  <a
                    href={link.href}
                    class={cn(
                      "w-full rounded-md px-4 py-2 bg-neutral-900/0 hover:bg-neutral-800/60",
                      {
                        "bg-neutral-900/60":
                          pathname === `/${lang}${link.href}`,
                      },
                    )}
                  >
                    {t(navTranslationKey)}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
      <div
        class="mx-4 my-2 h-[1px] basis-[100%] rounded-full bg-white bg-gradient-to-r from-neutral-800 to-neutral-900"
      >
      </div>
      <LanguageToggle />
    </div>
  </div>
</div>

<script>
  import animejs from "animejs/lib/anime.es";

  const burgerContainer = document.querySelector(
    "[burger-container]",
  ) as HTMLButtonElement | null;

  const burgerDropdown = document.querySelector(
    "[burger-dropdown]",
  ) as HTMLDivElement | null;

  let isOpen = false;

  function openDropdown(dropdown: HTMLDivElement) {
    isOpen = true;
    dropdown.style.display = "block";
    animejs({
      targets: "[burger-dropdown]",
      translateX: 0,
      translateY: 0,
      opacity: 1,
      easing: "easeInQuad",
      duration: 120,
    });
  }

  function closeDropdown(dropdown: HTMLDivElement) {
    isOpen = false;
    animejs({
      targets: "[burger-dropdown]",
      translateX: "1.5rem",
      opacity: 0,
      easing: "easeOutQuad",
      duration: 120,
      complete: function () {
        dropdown.style.display = "none";
        dropdown.style.transform = "translateX(0) translateY(-1.5rem)";
      },
    });
  }

  function toggleDropdown(dropdown: HTMLDivElement) {
    if (isOpen) {
      closeDropdown(dropdown);
      return;
    }

    openDropdown(dropdown);
  }

  function closeOnOutsideClick(e: MouseEvent, dropdown: HTMLDivElement) {
    const target = e.target as HTMLElement;

    if (!burgerContainer?.contains(target)) {
      closeDropdown(dropdown);
    }
  }

  burgerContainer?.addEventListener("click", () =>
    toggleDropdown(burgerDropdown!),
  );

  document.addEventListener("click", (e) =>
    closeOnOutsideClick(e, burgerDropdown!),
  );
</script>
