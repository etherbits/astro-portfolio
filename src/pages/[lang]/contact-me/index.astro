---
import Layout from "../../../layouts/Layout.astro";
import OutlineText from "../../../components/OutlineText.astro";
import { getLangFromUrl, generateTranslator } from "../../../i18n/utils";

import { languages } from "../../../i18n/ui";
import Button from "../../../components/Button.astro";
import RectLinks from "../../../components/RectLinks.astro";
import Icon from "../../../components/Icon.astro";
import Input from "../../../components/form/Input.astro";
import TextArea from "../../../components/form/TextArea.astro";
const lang = getLangFromUrl(Astro.url) as keyof typeof languages;
const t = generateTranslator(lang);
---

<Layout title="contact-me">
  <div class="flex w-full md:w-auto flex-col md:items-center">
    <div>
      <OutlineText>{t("contact.title")}</OutlineText>
    </div>
    <main class="py-11 md:w-[720px] md:py-16">
      <form
        method="POST"
        class="mb-11 flex w-full flex-col items-end gap-6"
        contact-form
      >
        <div class="flex w-full flex-col gap-6 md:flex-row md:gap-8">
          <Input
            icon="User"
            class="w-full"
            type="text"
            label={t("contact.name_label")}
            placeholder={t("contact.name_placeholder")}
            name="name"
            required
          />
          <Input
            icon="Mail"
            class="w-full"
            type="email"
            label={t("contact.email_label")}
            placeholder={t("contact.email_placeholder")}
            name="email"
            required
          />
        </div>
        <TextArea
          label={t("contact.message_label")}
          name="message"
          placeholder={t("contact.message_placeholder")}
          required
        />
        <Button type="submit">{t("contact.send_button")}</Button>
        <p
          id="status-message"
          class="text-sm text-slate-400 md:text-base empty:mt-0 mt-3"
        >
        </p>
      </form>
      <section class="flex w-fit flex-col items-start gap-6">
        <h4>{t("contact.contact_info_title")}</h4>
        <ul class="mb-4 flex flex-col gap-4 text-sm">
          <li class="flex items-center gap-3">
            <Icon icon="Mail" class="stroke-slate-400 w-5 h-5" />
            <span class="break-all">nika.qvrivishviliwork@gmail.com</span>
          </li>
        </ul>
        <RectLinks size={36} />
      </section>
    </main>
  </div>
</Layout>

<script>
  import type { ZodIssue } from "astro/zod";
  import { getLangFromUrl, translateZodErrors } from "../../../i18n/utils";
  import type { languages } from "../../../i18n/ui";
  const lang = getLangFromUrl(
    new URL(window.location.href),
  ) as keyof typeof languages;

  const contactForm = document.querySelector("[contact-form]");

  function changeStatus(message: string, type: "normal" | "error" | "success") {
    const statusMessageEl = document.getElementById(
      "status-message",
    ) as HTMLParagraphElement;
    statusMessageEl.innerHTML = message;
    switch (type) {
      case "normal":
        statusMessageEl.style.color = "#94a3b8";
        break;
      case "error":
        statusMessageEl.style.color = "#ef4444";
        break;
      case "success":
        statusMessageEl.style.color = "#34d399";
        break;
    }
  }

  function resetErrorMessages() {
    const errMessageEls = document.querySelectorAll("[error-message]");
    errMessageEls.forEach((el) => (el.innerHTML = ""));
  }

  function handleFormErrors(issues: ZodIssue[]) {
    translateZodErrors(issues, lang);

    issues.forEach((err) => {
      const el = document.getElementById(`${err.path[0]}-error`);

      if (!el) return;

      el.innerText = err.message;
    });

    changeStatus("Could not send your mail", "error");
  }

  async function submit(e: Event) {
    e.preventDefault();

    changeStatus("Sending mail...", "normal");
    resetErrorMessages();

    const res = await fetch("/api/send-mail", {
      method: "POST",
      body: new FormData(e.currentTarget as HTMLFormElement),
    });

    if (!res.ok) {
      const fieldErrors: ZodIssue[] = await res.json();
      handleFormErrors(fieldErrors);
      return;
    }

    changeStatus("Successfully sent your mail!", "success");
  }

  contactForm?.addEventListener("submit", (e) => {
    submit(e);
  });
</script>
